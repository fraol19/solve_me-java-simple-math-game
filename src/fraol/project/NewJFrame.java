package fraol.project;

import java.awt.event.KeyEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;




public class NewJFrame extends javax.swing.JFrame{

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
       /*save original size and location of buttons befor animation*/
        size = playTab.getSize();
        size2 = levelTab.getSize();
        size3 = seqTab.getSize();
        location = playTab.getLocation();
        location2  = levelTab.getLocation();
        location3 = seqTab.getLocation();
        
        groupRadios();                     //group radios when the program runs
        hideComponents("level", true);     //hide level radios
        hideComponents("gamepanel", true); //hide internal game panel
        scoreOperation("read", 0);         //read the best scores from file
        
        animation = new AnimationClass();
        animationTimer = new Timer(50, animation);  //50 milisecond delay
        animationTimer.start();                    //this timer is infinite timer to animate the stars on home screen
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        homePanel = new javax.swing.JPanel();
        gamePanel = new javax.swing.JPanel();
        bounusLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        levelLabel = new javax.swing.JLabel();
        generateTab = new javax.swing.JLabel();
        eqLabel = new javax.swing.JLabel();
        answerLabel = new javax.swing.JLabel();
        answerField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        LeaveTab = new javax.swing.JLabel();
        missLabel = new javax.swing.JLabel();
        correctLabel = new javax.swing.JLabel();
        toastLabel = new javax.swing.JLabel();
        bestScoreLabel = new javax.swing.JLabel();
        replayTab = new javax.swing.JLabel();
        hintLable = new javax.swing.JLabel();
        gameBackground = new javax.swing.JLabel();
        helpArea = new javax.swing.JScrollPane();
        helpTextArea = new javax.swing.JTextArea();
        gameTitleLable = new javax.swing.JLabel();
        Liner1 = new javax.swing.JSeparator();
        playTab = new javax.swing.JLabel();
        seqTab = new javax.swing.JLabel();
        levelTab = new javax.swing.JLabel();
        simpleRadio = new javax.swing.JRadioButton();
        mediumRadio = new javax.swing.JRadioButton();
        hardRadio = new javax.swing.JRadioButton();
        vhardRadio = new javax.swing.JRadioButton();
        animatorLabel1 = new javax.swing.JLabel();
        animatorLabel2 = new javax.swing.JLabel();
        animatorLabel3 = new javax.swing.JLabel();
        animatorLabel4 = new javax.swing.JLabel();
        animatorLabel11 = new javax.swing.JLabel();
        animatorLabel6 = new javax.swing.JLabel();
        animatorLabel7 = new javax.swing.JLabel();
        animatorLabel5 = new javax.swing.JLabel();
        animatorLabel8 = new javax.swing.JLabel();
        animatorLabel9 = new javax.swing.JLabel();
        animatorLabel10 = new javax.swing.JLabel();
        animatorLabel12 = new javax.swing.JLabel();
        animatorLabel13 = new javax.swing.JLabel();
        aboutLable = new javax.swing.JLabel();
        helpLable = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        developerLabel = new javax.swing.JLabel();
        developerLabel2 = new javax.swing.JLabel();
        BackgroundLabel = new javax.swing.JLabel();
        tabPanel = new javax.swing.JPanel();
        appNameLabel = new javax.swing.JLabel();
        minimizeLabel = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        homePanel.setBackground(new java.awt.Color(255, 255, 255));
        homePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        homePanel.setLayout(null);

        gamePanel.setBackground(new java.awt.Color(255, 255, 255));
        gamePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gamePanel.setLayout(null);

        bounusLabel.setBackground(new java.awt.Color(255, 255, 255));
        bounusLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        bounusLabel.setForeground(new java.awt.Color(51, 204, 255));
        bounusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bounusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        bounusLabel.setText("BOUNUS         : ");
        gamePanel.add(bounusLabel);
        bounusLabel.setBounds(60, 70, 390, 40);

        timeLabel.setBackground(new java.awt.Color(255, 255, 255));
        timeLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(102, 0, 102));
        timeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/timer.png"))); // NOI18N
        timeLabel.setText("TOTAL TIME  : ");
        gamePanel.add(timeLabel);
        timeLabel.setBounds(60, 130, 320, 40);

        scoreLabel.setBackground(new java.awt.Color(255, 255, 255));
        scoreLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        scoreLabel.setForeground(new java.awt.Color(153, 0, 153));
        scoreLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/score.png"))); // NOI18N
        scoreLabel.setText("SCORE           :");
        gamePanel.add(scoreLabel);
        scoreLabel.setBounds(60, 190, 290, 40);

        levelLabel.setBackground(new java.awt.Color(255, 255, 255));
        levelLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        levelLabel.setForeground(new java.awt.Color(153, 0, 153));
        levelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/level.png"))); // NOI18N
        levelLabel.setText("LEVEL   :");
        gamePanel.add(levelLabel);
        levelLabel.setBounds(70, 250, 280, 40);

        generateTab.setBackground(new java.awt.Color(0, 255, 222));
        generateTab.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        generateTab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        generateTab.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gamePanel.add(generateTab);
        generateTab.setBounds(210, 410, 420, 50);

        eqLabel.setBackground(new java.awt.Color(255, 255, 255));
        eqLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        eqLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eqLabel.setAutoscrolls(true);
        eqLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Round your answer if it is decimal number"));
        gamePanel.add(eqLabel);
        eqLabel.setBounds(0, 310, 850, 70);

        answerLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        answerLabel.setForeground(new java.awt.Color(51, 51, 0));
        answerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        answerLabel.setText("Answer");
        gamePanel.add(answerLabel);
        answerLabel.setBounds(190, 470, 110, 40);

        answerField.setFont(new java.awt.Font("Eras Demi ITC", 1, 18)); // NOI18N
        answerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerFieldActionPerformed(evt);
            }
        });
        answerField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                answerFieldKeyPressed(evt);
            }
        });
        gamePanel.add(answerField);
        answerField.setBounds(330, 470, 190, 40);

        submitButton.setBackground(new java.awt.Color(173, 255, 255));
        submitButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 13)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        gamePanel.add(submitButton);
        submitButton.setBounds(430, 530, 90, 40);

        LeaveTab.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        LeaveTab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LeaveTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/home.png"))); // NOI18N
        LeaveTab.setText("Leave game");
        LeaveTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        LeaveTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LeaveTabMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LeaveTabMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LeaveTabMouseExited(evt);
            }
        });
        gamePanel.add(LeaveTab);
        LeaveTab.setBounds(0, 560, 170, 40);

        missLabel.setBackground(new java.awt.Color(255, 255, 255));
        missLabel.setFont(new java.awt.Font("Gadugi", 1, 18)); // NOI18N
        missLabel.setForeground(new java.awt.Color(255, 0, 102));
        missLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/miss.png"))); // NOI18N
        missLabel.setText("Missed                  : 0");
        missLabel.setIconTextGap(10);
        gamePanel.add(missLabel);
        missLabel.setBounds(580, 200, 260, 40);

        correctLabel.setBackground(new java.awt.Color(255, 255, 255));
        correctLabel.setFont(new java.awt.Font("Gadugi", 1, 18)); // NOI18N
        correctLabel.setForeground(new java.awt.Color(51, 204, 0));
        correctLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/correct.png"))); // NOI18N
        correctLabel.setText("Correct Answers  : 0");
        gamePanel.add(correctLabel);
        correctLabel.setBounds(570, 250, 270, 40);

        toastLabel.setBackground(new java.awt.Color(255, 255, 255));
        toastLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        toastLabel.setForeground(new java.awt.Color(255, 255, 255));
        toastLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        toastLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        gamePanel.add(toastLabel);
        toastLabel.setBounds(460, 60, 50, 50);

        bestScoreLabel.setBackground(new java.awt.Color(255, 255, 255));
        bestScoreLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bestScoreLabel.setForeground(new java.awt.Color(51, 204, 255));
        bestScoreLabel.setText("Best Score                   :");
        gamePanel.add(bestScoreLabel);
        bestScoreLabel.setBounds(580, 150, 250, 40);

        replayTab.setBackground(new java.awt.Color(255, 255, 255));
        replayTab.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        replayTab.setForeground(new java.awt.Color(255, 255, 255));
        replayTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/reset.png"))); // NOI18N
        replayTab.setText("Replay");
        replayTab.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        replayTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                replayTabMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                replayTabMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                replayTabMouseExited(evt);
            }
        });
        gamePanel.add(replayTab);
        replayTab.setBounds(700, 390, 150, 50);

        hintLable.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        hintLable.setText("Hint !!");
        gamePanel.add(hintLable);
        hintLable.setBounds(10, 390, 360, 30);

        gameBackground.setBackground(new java.awt.Color(255, 255, 255));
        gameBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mathBack2.jpg"))); // NOI18N
        gameBackground.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gamePanel.add(gameBackground);
        gameBackground.setBounds(0, 0, 850, 600);

        homePanel.add(gamePanel);
        gamePanel.setBounds(0, 0, 850, 600);

        helpTextArea.setColumns(20);
        helpTextArea.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 13)); // NOI18N
        helpTextArea.setForeground(new java.awt.Color(0, 0, 204));
        helpTextArea.setRows(18);
        helpTextArea.setText("              Solve Me \nthis game is a mathematical game  \nbased on mathematical operations  and \nsequences  \n*click the level  tab to select your level\n*click play tab to play operational \ngames(+,-,..) \n* click sequence tab to play sequencial \ngames \nthe game counts down a given time if  \nyou give the correct answer in a given \ntime your remaining time is added to \nthe next equation if u miss the answer it\nwill cause you a 3 sec lose from ur time,\nscoring is based on the level and the \nremaining time when you answer the  \nquestion");
        helpTextArea.setWrapStyleWord(true);
        helpArea.setViewportView(helpTextArea);

        homePanel.add(helpArea);
        helpArea.setBounds(530, 40, 320, 310);

        gameTitleLable.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 48)); // NOI18N
        gameTitleLable.setForeground(new java.awt.Color(255, 255, 255));
        gameTitleLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameTitleLable.setText("SOLVE ME");
        homePanel.add(gameTitleLable);
        gameTitleLable.setBounds(170, 20, 450, 90);

        Liner1.setBackground(new java.awt.Color(51, 255, 0));
        Liner1.setForeground(new java.awt.Color(51, 255, 51));
        Liner1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        Liner1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Liner1.setMinimumSize(new java.awt.Dimension(380, 20));
        homePanel.add(Liner1);
        Liner1.setBounds(230, 90, 330, 10);

        playTab.setBackground(new java.awt.Color(255, 255, 255));
        playTab.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        playTab.setForeground(new java.awt.Color(102, 255, 255));
        playTab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playTab.setText("Play");
        playTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        playTab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        playTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playTabMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playTabMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playTabMouseExited(evt);
            }
        });
        homePanel.add(playTab);
        playTab.setBounds(230, 180, 330, 70);

        seqTab.setBackground(new java.awt.Color(255, 255, 255));
        seqTab.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        seqTab.setForeground(new java.awt.Color(0, 255, 255));
        seqTab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        seqTab.setText("Sequential");
        seqTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        seqTab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        seqTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seqTabMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                seqTabMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                seqTabMouseExited(evt);
            }
        });
        homePanel.add(seqTab);
        seqTab.setBounds(230, 260, 330, 70);

        levelTab.setBackground(new java.awt.Color(255, 255, 255));
        levelTab.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        levelTab.setForeground(new java.awt.Color(0, 255, 255));
        levelTab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelTab.setText("Level");
        levelTab.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        levelTab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        levelTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                levelTabMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                levelTabMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                levelTabMouseExited(evt);
            }
        });
        homePanel.add(levelTab);
        levelTab.setBounds(230, 340, 330, 70);

        simpleRadio.setBackground(new java.awt.Color(255, 225, 241));
        simpleRadio.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        simpleRadio.setForeground(new java.awt.Color(102, 255, 255));
        simpleRadio.setText("Junior");
        simpleRadio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homePanel.add(simpleRadio);
        simpleRadio.setBounds(250, 480, 120, 30);

        mediumRadio.setBackground(new java.awt.Color(255, 225, 241));
        mediumRadio.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        mediumRadio.setForeground(new java.awt.Color(102, 255, 255));
        mediumRadio.setText("Medium");
        mediumRadio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homePanel.add(mediumRadio);
        mediumRadio.setBounds(250, 530, 110, 30);

        hardRadio.setBackground(new java.awt.Color(255, 225, 241));
        hardRadio.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        hardRadio.setForeground(new java.awt.Color(102, 255, 255));
        hardRadio.setText("Hard");
        hardRadio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homePanel.add(hardRadio);
        hardRadio.setBounds(410, 480, 120, 30);

        vhardRadio.setBackground(new java.awt.Color(255, 225, 241));
        vhardRadio.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        vhardRadio.setForeground(new java.awt.Color(102, 255, 255));
        vhardRadio.setText("Advanced");
        vhardRadio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homePanel.add(vhardRadio);
        vhardRadio.setBounds(410, 530, 140, 30);

        animatorLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel1);
        animatorLabel1.setBounds(230, 120, 60, 50);

        animatorLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        homePanel.add(animatorLabel2);
        animatorLabel2.setBounds(320, 120, 60, 50);

        animatorLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel3);
        animatorLabel3.setBounds(420, 120, 60, 50);

        animatorLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        homePanel.add(animatorLabel4);
        animatorLabel4.setBounds(510, 120, 60, 50);

        animatorLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel11);
        animatorLabel11.setBounds(160, 360, 60, 50);

        animatorLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        homePanel.add(animatorLabel6);
        animatorLabel6.setBounds(610, 270, 60, 60);

        animatorLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel7);
        animatorLabel7.setBounds(590, 360, 60, 50);

        animatorLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel5);
        animatorLabel5.setBounds(590, 180, 60, 50);

        animatorLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        homePanel.add(animatorLabel8);
        animatorLabel8.setBounds(520, 420, 60, 50);

        animatorLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel9);
        animatorLabel9.setBounds(370, 420, 60, 50);

        animatorLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        homePanel.add(animatorLabel10);
        animatorLabel10.setBounds(240, 420, 60, 50);

        animatorLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bounus.png"))); // NOI18N
        homePanel.add(animatorLabel12);
        animatorLabel12.setBounds(120, 270, 60, 50);

        animatorLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/star.png"))); // NOI18N
        homePanel.add(animatorLabel13);
        animatorLabel13.setBounds(160, 180, 60, 50);

        aboutLable.setBackground(new java.awt.Color(255, 255, 255));
        aboutLable.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        aboutLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutLable.setText("About");
        aboutLable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aboutLableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aboutLableMouseExited(evt);
            }
        });
        homePanel.add(aboutLable);
        aboutLable.setBounds(800, 0, 50, 30);

        helpLable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        helpLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helpLable.setText("Help");
        helpLable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpLableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpLableMouseExited(evt);
            }
        });
        homePanel.add(helpLable);
        helpLable.setBounds(740, 0, 40, 30);

        versionLabel.setBackground(new java.awt.Color(255, 255, 255));
        versionLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        versionLabel.setForeground(new java.awt.Color(255, 255, 255));
        versionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        versionLabel.setText("Solve Me Version 1.0 ");
        homePanel.add(versionLabel);
        versionLabel.setBounds(650, 30, 200, 30);

        developerLabel.setBackground(new java.awt.Color(255, 255, 255));
        developerLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        developerLabel.setForeground(new java.awt.Color(255, 255, 255));
        developerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        developerLabel.setText("Developed by 2nd year software ");
        homePanel.add(developerLabel);
        developerLabel.setBounds(600, 60, 250, 30);

        developerLabel2.setBackground(new java.awt.Color(255, 255, 255));
        developerLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        developerLabel2.setForeground(new java.awt.Color(255, 255, 255));
        developerLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        developerLabel2.setText("engineering student at AASTU ");
        homePanel.add(developerLabel2);
        developerLabel2.setBounds(620, 90, 230, 30);

        BackgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mathBack.jpg"))); // NOI18N
        homePanel.add(BackgroundLabel);
        BackgroundLabel.setBounds(0, 0, 850, 600);

        tabPanel.setBackground(new java.awt.Color(255, 255, 255));
        tabPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tabPanelMouseDragged(evt);
            }
        });
        tabPanel.setLayout(null);

        appNameLabel.setBackground(new java.awt.Color(255, 255, 255));
        appNameLabel.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        appNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        appNameLabel.setText("S01\\/E  |\\/|E");
        appNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        appNameLabel.setIconTextGap(5);
        tabPanel.add(appNameLabel);
        appNameLabel.setBounds(10, 0, 130, 40);

        minimizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minimizeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minimize.png"))); // NOI18N
        minimizeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimizeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeLabelMouseExited(evt);
            }
        });
        tabPanel.add(minimizeLabel);
        minimizeLabel.setBounds(780, 0, 30, 40);

        closeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/closei.png"))); // NOI18N
        closeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeLabel.setPreferredSize(new java.awt.Dimension(31, 30));
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeLabelMouseExited(evt);
            }
        });
        tabPanel.add(closeLabel);
        closeLabel.setBounds(820, 0, 30, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private final Dimension size,size2,size3;        
    private final Point location,location2,location3;  
    private Timer animationTimer;
    
    private static int score = 0;
    private static int bestScore = 0;
    private int correctAnswers=0;
    private int miss=0;
    private String level = "";
    private Timerclass tc;
    private AutoGenerate autogenerator;
    private AnimationClass animation;
    private static int[] bestScores = new int[5];
    
    public static int time;
    public static String equation;
    public static double result;
    public static Timer timer,autotimer;
    public static SimpleEquation simpleResult;
    public static MediumEquation mediumResult;
    public static HardEquation hardResult;
    public static veryHardEquation vhardResult;
    public static Sequence sequence;
    
    
      /*getters and setters*/
    public static int getScore() {
        return score;
    }

    public static int getBestScore() {
        return bestScore;
    }

    public static void setBestScore(int bestScore) {
        NewJFrame.bestScore = bestScore;
    }
    
       /*here..........
        custom methods for different actions*/
    public static void scoreOperation(String key, int leveltime){
        File file = new File("score.dat");
        if(key.equals("read")){
          
            try{ 
               if(!file.exists()){
                 file.createNewFile();
               }
               
               Scanner reader = new Scanner(file);
               int i=0;
               while(reader.hasNext()){
                 String tmp = reader.nextLine();
                 bestScores[i] = Integer.parseInt(tmp); //saving the bestscore on array
                 i++;
               }
              reader.close();
            }catch(IOException ex){
              JOptionPane.showMessageDialog(null, "score reading error");
            }    
          
        }
        
        if(key.equals("update")){
            if(leveltime == 40){
              bestScores[0] = bestScore;
            }
            if(leveltime == 70){
              bestScores[1] = bestScore;
            }
            if(leveltime == 100){
              bestScores[2] = bestScore;
            }
            if(leveltime == 160){
              bestScores[3] = bestScore;
            }
            if(leveltime == 50){
              bestScores[4] = bestScore;
            }
            try {
                file.delete();         //delete best score file
                file.createNewFile();  //recreate best score file
                PrintWriter writer = new PrintWriter(new FileOutputStream(file,true));
                for(int x : bestScores){
                  writer.println(String.valueOf(x));
                }
              writer.close();
            } catch (IOException ex) {
              JOptionPane.showMessageDialog(null, "score update error"); 
            }
           
        }
    }
     
    
    private void increaseDifficulty(){
       //update difficulty for every 2 correct answers 
       if(time == 40){
         if(correctAnswers % 2 == 0){
           simpleResult.updateDifficulty();
         }
       }
       if(time == 70){
         if(correctAnswers % 2 == 0){
           mediumResult.updateDifficulty();
         }
       }
       if(time == 100){
         if(correctAnswers % 2 == 0){
           hardResult.updateDifficulty();
         }
       }
       if(time == 120){
         if(correctAnswers % 2 == 0){
           vhardResult.updateDifficulty();
         }
       }
    }
   
      
    private void initBestscore(){
        //initialize best score
        if(time == 40){
         bestScore = bestScores[0];
        }
        if(time == 70 ){
         bestScore = bestScores[1];
        }
        if(time == 100 ){
         bestScore = bestScores[2];
        }
        if(time == 160 ){
         bestScore = bestScores[3];
        }
        if(time == 50){
         bestScore = bestScores[4];
        }
        
    }
    
    
    private void defaultLook(){
      /*this method is used to restore default sizze,
        location and background of home buttons*/ 
      playTab.setSize(size);
      playTab.setLocation(location);
      seqTab.setSize(size3);
      seqTab.setLocation(location3);
      levelTab.setSize(size2);
      levelTab.setLocation(location2);
      playTab.setBackground(Color.WHITE);
      seqTab.setBackground(Color.WHITE);
      levelTab.setBackground(Color.WHITE);
      
    }
    
    
    private void hideComponents(String parent , boolean value){
        /*this method is used to work on panel visibilty
        and some button and component visibility*/
        switch(parent){   
            case "level":
               simpleRadio.setVisible(!value);
               mediumRadio.setVisible(!value);
               hardRadio.setVisible(!value);
               vhardRadio.setVisible(!value);
              break; 
            case "gamepanel":
               gamePanel.setVisible(!value);
            default:
              break;       
        }
        /*the bootom four components are hidden by default*/
        versionLabel.setVisible(false);
        developerLabel.setVisible(false);
        developerLabel2.setVisible(false);
        helpArea.setVisible(false);
        
        replayTab.setVisible(false);       //must be hidden all the time unless the game is over
        toastLabel.setVisible(false);      //must be hidden unless bounus is found
    }
    
    
    private void groupRadios(){
      buttonGroup.add(simpleRadio);
      buttonGroup.add(mediumRadio);
      buttonGroup.add(hardRadio);
      buttonGroup.add(vhardRadio);
      simpleRadio.setSelected(true);
    }
   
    
    private boolean inputVerifier(){
      boolean check = false;
       if(answerField.getText().isEmpty() || answerField.getText().contains(" ")){
         check = false;
       }
       if(!answerField.getText().isEmpty()){
         for(int i=0 ; i<answerField.getText().length() ; i++){
           if(Character.isDigit(answerField.getText().charAt(i))){
              check = true;
           }else{
              if(i==0 && answerField.getText().charAt(i) == '-'){
                check = true;
              }
              else{
                check = false;  
              }
            } 
         }
       }
      
      return check; 
    }
    
    
    private void Scorer(){
        switch (time) {
            case 50:
               if(Timerclass.time >= time/2){
                    score += 10;
                    Timerclass.time += 8;
                    scoreLabel.setText("SCORE           : " + score);
                }
                else{
                    score += 5;
                    Timerclass.time += 5;
                    scoreLabel.setText("SCORE           : " + score);
                }
              break; 
            case 40:
                if(Timerclass.time >= time/2){
                    score += 15;
                    Timerclass.time += 5;
                    scoreLabel.setText("SCORE           : " + score);
                }
                else{
                    score += 10;
                    Timerclass.time += 2;
                    scoreLabel.setText("SCORE           : " + score);
                }      
                break;
            case 70:
                if(Timerclass.time >= time/2){
                    score += 20;
                    Timerclass.time += 6;
                    scoreLabel.setText("SCORE           : " + score);
                }
                else{
                    score += 15;
                    Timerclass.time += 4;
                    scoreLabel.setText("SCORE           : " + score);
                }      
                break;
            case 100:
                if(Timerclass.time >= time/2){
                    score += 25;
                    Timerclass.time += 8;
                    scoreLabel.setText("SCORE           : " + score);
                }
                else{
                    score += 20;
                    Timerclass.time += 4;
                    scoreLabel.setText("SCORE           : " + score);
                }      
                break;
            default:
                if(Timerclass.time >= time/2){
                    score += 30;
                    Timerclass.time += 9;
                    scoreLabel.setText("SCORE           : " + score);
                }
                else{
                    score += 25;
                    Timerclass.time += 5;
                    scoreLabel.setText("SCORE           : " + score);
                }      
                break;
        }
        
    } 
    
     /*the bottom methods are Event handlers for 
       mouse and keyevents*/
    
    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
         System.exit(1);              //custom window close button
       
    }//GEN-LAST:event_closeLabelMouseClicked

    
    private void minimizeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeLabelMouseClicked
         setState(JFrame.ICONIFIED); //custom window minimize button
         
    }//GEN-LAST:event_minimizeLabelMouseClicked

    
    private void playTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playTabMouseClicked
        animationTimer.stop();
        hideComponents("level", true);
        gamePanel.setVisible(true);
        hintLable.setVisible(false);
        eqLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Round your answer if it is decimal number"));
  
          if(simpleRadio.isSelected()){
            simpleResult = new SimpleEquation();
            time = 40;
            levelLabel.setText("LEVEL   : " + simpleRadio.getText().toUpperCase());
            level = simpleRadio.getText().toUpperCase();
          }
          else if(mediumRadio.isSelected()){
            mediumResult = new MediumEquation();
            time = 70;
            levelLabel.setText("LEVEL   : " + mediumRadio.getText().toUpperCase());
            //level = mediumRadio.getText().toUpperCase();
          }
          else if(hardRadio.isSelected()){
            hardResult = new HardEquation();
            time = 100;
            levelLabel.setText("LEVEL   : " + hardRadio.getText().toUpperCase());
            level = hardRadio.getText().toUpperCase();
          }
          else{
            vhardResult = new veryHardEquation();
            time = 160;
            levelLabel.setText("LEVEL   : " + vhardRadio.getText().toUpperCase());
            level = vhardRadio.getText().toUpperCase();
          }
          
       tc = new Timerclass(time);
       timer = new Timer(1000,tc);
       
       bounusLabel.setText("BOUNUS        : " + 0 + "sec");
       timeLabel.setText("TOTAL TIME  : " + time + "sec");
       score = 0;
       initBestscore();
       bestScoreLabel.setText("Best Score                   : "+ bestScore);
       autogenerator = new AutoGenerate();
       autotimer = new Timer(500, autogenerator);
       autotimer.start();
        
    }//GEN-LAST:event_playTabMouseClicked

    
    private void levelTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelTabMouseClicked
        hideComponents("level", false);
       
    }//GEN-LAST:event_levelTabMouseClicked

    
    private void LeaveTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeaveTabMouseClicked
        hideComponents("gamepanel", true);
        hideComponents("level", true);
        timer.stop();
        autotimer.stop();
        Timerclass.toastTimer.stop();
        animationTimer.start();
        score = 0;
        correctAnswers = 0;
        miss = 0;
        generateTab.setText("");
        eqLabel.setText("");
        hintLable.setText("Hint...");
        scoreLabel.setText("SCORE           :  ");
        correctLabel.setText("Correct Answers  : " + correctAnswers);
        missLabel.setText("Missed                  : " + miss); 
        timeLabel.setText("TOTAL TIME  : ");
        bestScoreLabel.setText("Best Score                   : ");
        bounusLabel.setText("BOUNUS        : " + 0 + "sec");
        replayTab.setVisible(false);
        toastLabel.setVisible(false);
    }//GEN-LAST:event_LeaveTabMouseClicked

   
    private void answerFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_answerFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
          submitButton.doClick();
        }
    }//GEN-LAST:event_answerFieldKeyPressed

    
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if(inputVerifier()){
           double givenAnswer = Double.parseDouble(answerField.getText()); 
           if(result == givenAnswer){
            timer.stop();
            answerField.setEnabled(false);
            answerField.setText("");
            submitButton.setEnabled(false);
            Scorer();
            
            if(time != 50){
              increaseDifficulty();     //since level difficulty is not available in sequence
            }
            
            correctAnswers++;          //count correct answers
            correctLabel.setText("Correct Answers  : "+ correctAnswers);
             
            //save the remaining time and add it to the next
            Timerclass.bounus = Timerclass.time;  
            tc.addBounus(time);
            
            autogenerator = new AutoGenerate();         //start the auto generator
            autotimer = new Timer(500, autogenerator); 
            autotimer.start();                          //start waiting timer
           }else{
            //count if a wrong answer happens
            miss++;
            Timerclass.time -= 3;
            answerField.setText("");
            missLabel.setText("Missed                  : "+ miss);
           } 
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

   
    private void replayTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_replayTabMouseClicked
        replayTab.setVisible(false);
         //stop the timers
        timer.stop();
        autotimer.stop();
         //reset values
        score = 0;
        correctAnswers = 0;
        miss = 0;
        //reset labels
        generateTab.setText("");
        eqLabel.setText("");
        hintLable.setText("Hint....");
        scoreLabel.setText("SCORE           :  ");
        correctLabel.setText("Correct Answers  : " + correctAnswers);
        missLabel.setText("Missed                  : " + miss); 
        timeLabel.setText("TOTAL TIME  : " + String.valueOf(time)+"sec");
        bestScoreLabel.setText("Best Score                   : "+ bestScore);
        answerField.setEnabled(true);
        submitButton.setEnabled(true);
         //reset the timer
        tc = new Timerclass(time);
        autogenerator = new AutoGenerate();
        autotimer = new Timer(500, autogenerator);
        autotimer.start();
        
    }//GEN-LAST:event_replayTabMouseClicked

    
    private void seqTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seqTabMouseClicked
        animationTimer.stop();
        time = 50;         //reset time
        initBestscore();   //get proper bestscore
        hideComponents("level", true);
        hideComponents("gamepanel", false);
        hintLable.setVisible(true);
        timeLabel.setText("TOTAL TIME  : " + time);
        bestScoreLabel.setText("Best Score                   : "+ bestScore);
        eqLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence"));
        
        tc = new Timerclass(time);   //reset the time value
        timer = new Timer(1000,tc);  //reset timer
        sequence = new Sequence();   //creating an instance
        
        autogenerator = new AutoGenerate();        //automaticaly gets equation  
        autotimer = new Timer(500, autogenerator); 
        autotimer.start();                         //start auto generator delay time starts
        
    }//GEN-LAST:event_seqTabMouseClicked

    /*the bottom methods are handlers 
    of mouse event for animations*/
    
    private void tabPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPanelMouseDragged
        this.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
    }//GEN-LAST:event_tabPanelMouseDragged

    
    private void replayTabMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_replayTabMouseEntered
        replayTab.setBorder(javax.swing.BorderFactory.createLineBorder(Color.GREEN));
        replayTab.setForeground(Color.GREEN);
    }//GEN-LAST:event_replayTabMouseEntered

    
    private void replayTabMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_replayTabMouseExited
        replayTab.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        replayTab.setForeground(Color.WHITE);
    }//GEN-LAST:event_replayTabMouseExited

    
    private void closeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseEntered
        closeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
    }//GEN-LAST:event_closeLabelMouseEntered

    
    private void closeLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseExited
        closeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_closeLabelMouseExited

    
    private void minimizeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeLabelMouseEntered
        minimizeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLUE));
    }//GEN-LAST:event_minimizeLabelMouseEntered

    
    private void minimizeLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeLabelMouseExited
        minimizeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_minimizeLabelMouseExited

    
    private void LeaveTabMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeaveTabMouseEntered
       LeaveTab.setForeground(Color.RED);
    }//GEN-LAST:event_LeaveTabMouseEntered

    
    private void LeaveTabMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LeaveTabMouseExited
       LeaveTab.setForeground(Color.BLACK);
    }//GEN-LAST:event_LeaveTabMouseExited

    
    private void playTabMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playTabMouseEntered
        playTab.setSize(size.width - 50 , size.height - 20);
        playTab.setLocation(location.x + 25 , location.y + 10);
        playTab.setBackground(Color.ORANGE);
    }//GEN-LAST:event_playTabMouseEntered

    
    private void playTabMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playTabMouseExited
        defaultLook();
    }//GEN-LAST:event_playTabMouseExited

    
    private void seqTabMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seqTabMouseEntered
        seqTab.setSize(size3.width - 50 , size3.height - 20);
        seqTab.setLocation(location3.x + 25 , location3.y + 10);
        seqTab.setBackground(Color.ORANGE);
    }//GEN-LAST:event_seqTabMouseEntered

    
    private void seqTabMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seqTabMouseExited
        defaultLook();
    }//GEN-LAST:event_seqTabMouseExited

    
    private void levelTabMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelTabMouseEntered
        levelTab.setSize(size2.width - 50 , size2.height - 20);
        levelTab.setLocation(location2.x + 25 , location2.y + 10);
        levelTab.setBackground(Color.ORANGE);
    }//GEN-LAST:event_levelTabMouseEntered

    
    private void levelTabMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelTabMouseExited
       defaultLook();
    }//GEN-LAST:event_levelTabMouseExited

    
    private void aboutLableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutLableMouseEntered
        aboutLable.setBorder(javax.swing.BorderFactory.createLineBorder(Color.ORANGE));
        aboutLable.setForeground(Color.WHITE);
        versionLabel.setVisible(true);
        developerLabel.setVisible(true);
        developerLabel2.setVisible(true);
        
    }//GEN-LAST:event_aboutLableMouseEntered

    
    private void aboutLableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutLableMouseExited
       aboutLable.setBorder(javax.swing.BorderFactory.createEmptyBorder());
       aboutLable.setForeground(Color.BLACK);
       versionLabel.setVisible(false);
       developerLabel.setVisible(false);
       developerLabel2.setVisible(false);
    }//GEN-LAST:event_aboutLableMouseExited

    
    private void helpLableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLableMouseEntered
        helpArea.setVisible(true);
        helpLable.setBorder(javax.swing.BorderFactory.createLineBorder(Color.ORANGE));
        helpLable.setForeground(Color.WHITE);
    }//GEN-LAST:event_helpLableMouseEntered

    
    private void helpLableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLableMouseExited
        helpArea.setVisible(false);
        helpLable.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        helpLable.setForeground(Color.BLACK);
    }//GEN-LAST:event_helpLableMouseExited

    private void answerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerFieldActionPerformed
        
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackgroundLabel;
    private javax.swing.JLabel LeaveTab;
    private javax.swing.JSeparator Liner1;
    private javax.swing.JLabel aboutLable;
    public static javax.swing.JLabel animatorLabel1;
    public static javax.swing.JLabel animatorLabel10;
    public static javax.swing.JLabel animatorLabel11;
    public static javax.swing.JLabel animatorLabel12;
    public static javax.swing.JLabel animatorLabel13;
    public static javax.swing.JLabel animatorLabel2;
    public static javax.swing.JLabel animatorLabel3;
    public static javax.swing.JLabel animatorLabel4;
    public static javax.swing.JLabel animatorLabel5;
    public static javax.swing.JLabel animatorLabel6;
    public static javax.swing.JLabel animatorLabel7;
    public static javax.swing.JLabel animatorLabel8;
    public static javax.swing.JLabel animatorLabel9;
    public static javax.swing.JTextField answerField;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JLabel appNameLabel;
    public static javax.swing.JLabel bestScoreLabel;
    public static javax.swing.JLabel bounusLabel;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JLabel correctLabel;
    private javax.swing.JLabel developerLabel;
    private javax.swing.JLabel developerLabel2;
    public static javax.swing.JLabel eqLabel;
    private javax.swing.JLabel gameBackground;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel gameTitleLable;
    public static javax.swing.JLabel generateTab;
    private javax.swing.JRadioButton hardRadio;
    private javax.swing.JScrollPane helpArea;
    private javax.swing.JLabel helpLable;
    private javax.swing.JTextArea helpTextArea;
    public static javax.swing.JLabel hintLable;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel levelTab;
    private javax.swing.JRadioButton mediumRadio;
    private javax.swing.JLabel minimizeLabel;
    private javax.swing.JLabel missLabel;
    private javax.swing.JLabel playTab;
    public static javax.swing.JLabel replayTab;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel seqTab;
    private javax.swing.JRadioButton simpleRadio;
    public static javax.swing.JButton submitButton;
    private javax.swing.JPanel tabPanel;
    public static javax.swing.JLabel timeLabel;
    public static javax.swing.JLabel toastLabel;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JRadioButton vhardRadio;
    // End of variables declaration//GEN-END:variables

}


class AnimationClass implements ActionListener{
    
    int delay;
    int i=-1;
    
    public AnimationClass() {
        delay = 0;
        
        
    }
    
    @Override
    public void actionPerformed(ActionEvent ae) {
        if(delay == 0){
           i *= -1;
           NewJFrame.animatorLabel2.setVisible(false);
           NewJFrame.animatorLabel3.setVisible(false);
           NewJFrame.animatorLabel4.setVisible(false); 
           NewJFrame.animatorLabel5.setVisible(false);
           NewJFrame.animatorLabel6.setVisible(false);
           NewJFrame.animatorLabel7.setVisible(false);
           NewJFrame.animatorLabel8.setVisible(false);
           NewJFrame.animatorLabel9.setVisible(false);
           NewJFrame.animatorLabel10.setVisible(false);
           NewJFrame.animatorLabel11.setVisible(false);
           NewJFrame.animatorLabel12.setVisible(false);
           NewJFrame.animatorLabel13.setVisible(false);
        }
        if(delay == 14){
           i *= -1;
           NewJFrame.animatorLabel1.setVisible(false);
           NewJFrame.animatorLabel2.setVisible(false);
           NewJFrame.animatorLabel3.setVisible(false);
           NewJFrame.animatorLabel4.setVisible(false); 
           NewJFrame.animatorLabel5.setVisible(false);
           NewJFrame.animatorLabel6.setVisible(false);
           NewJFrame.animatorLabel7.setVisible(false);
           NewJFrame.animatorLabel8.setVisible(false);
           NewJFrame.animatorLabel9.setVisible(false);
           NewJFrame.animatorLabel10.setVisible(false);
           NewJFrame.animatorLabel11.setVisible(false);
           NewJFrame.animatorLabel12.setVisible(false); 
        }   
         delay += i;
          if(delay == 1)
           NewJFrame.animatorLabel1.setVisible(true);
          if(delay == 2)  
           NewJFrame.animatorLabel2.setVisible(true);
          if(delay == 3)
           NewJFrame.animatorLabel3.setVisible(true);
          if(delay == 4)
           NewJFrame.animatorLabel4.setVisible(true);
          if(delay == 5)
           NewJFrame.animatorLabel5.setVisible(true);
          if(delay == 6)  
           NewJFrame.animatorLabel6.setVisible(true);
          if(delay == 7)
           NewJFrame.animatorLabel7.setVisible(true);
          if(delay == 8)
           NewJFrame.animatorLabel8.setVisible(true);
          if(delay == 9)
           NewJFrame.animatorLabel9.setVisible(true);
          if(delay == 10)  
           NewJFrame.animatorLabel10.setVisible(true);
          if(delay == 11)
           NewJFrame.animatorLabel11.setVisible(true);
          if(delay == 12)  
           NewJFrame.animatorLabel12.setVisible(true);
          if(delay == 13)
           NewJFrame.animatorLabel13.setVisible(true);
          
          
     
    }



}

